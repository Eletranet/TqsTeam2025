name: Publish Docker images
on:
  push:
    branches: ['main']

jobs:
  build-backend-image:
    name: Push the Backend Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: apg2000/eletranet-backend

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server/eletranet/backend
          file: ./server/eletranet/backend/Dockerfile
          push: true
          tags: apg2000/eletranet-backend:latest
          labels: ${{ steps.meta.outputs.labels }}

  build-user-frontend-image:
    name: Push the User-Frontend Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: apg2000/eletranet-frontend

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./client/EletranetFrontend
          file: ./client/EletranetFrontend/Dockerfile
          push: true
          tags: apg2000/eletranet-frontend:latest
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VITE_BACKEND_API=http://deti-tqs-17.ua.pt:8080

  deploy:
    runs-on: self-hosted
    name: "Deploy to VM"
    needs: [build-backend-image, build-user-frontend-image]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: Create deployment (Jira)
        id: create_deployment
        uses: chrnorm/deployment-action@releases/v1
        with:
          environment: production
          ref: ${{ github.ref }}
          task: deploy
          transient_environment: false
          description: "Deploy da versão para produção"

      - name: "Deploy"
        run: |
          echo "CREATE DATABASE tqs_backend;" > init.sql
          sudo docker compose -f docker-compose.prod.yml pull
          sudo docker compose -f docker-compose.prod.yml up -d --remove-orphans
          sudo docker container prune -f
          sudo docker image prune -af
          sudo docker builder prune -af

      - name: Update deployment status (Jira)
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
          state: success
